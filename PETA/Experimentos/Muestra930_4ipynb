{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":19906,"status":"ok","timestamp":1677512592002,"user":{"displayName":"Hugo Massaroli","userId":"15440061811672054235"},"user_tz":180},"id":"xhN8vz1PQ8Wv","outputId":"69d78603-c995-4ed0-f191-225eb5dda6bb"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/gdrive\n"]}],"source":["try:\n","    from google.colab import drive\n","    drive.mount('/content/gdrive')\n","except ModuleNotFoundError:\n","    print('Not running on Google')"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"vpyelL4yXvC0","executionInfo":{"status":"ok","timestamp":1677512592003,"user_tz":180,"elapsed":5,"user":{"displayName":"Hugo Massaroli","userId":"15440061811672054235"}}},"outputs":[],"source":["%matplotlib inline"]},{"cell_type":"markdown","metadata":{"id":"ChL61Twesn0o"},"source":[]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3580,"status":"ok","timestamp":1677512595579,"user":{"displayName":"Hugo Massaroli","userId":"15440061811672054235"},"user_tz":180},"id":"sRvvbIrxP5Hd","outputId":"51b5404a-480b-4b26-e0d5-22368d811574"},"outputs":[{"output_type":"stream","name":"stdout","text":["PyTorch Version:  1.13.1+cu116\n","Torchvision Version:  0.14.1+cu116\n"]}],"source":["from __future__ import print_function, division\n","import os\n","import time\n","import copy\n","import torch\n","import pandas as pd\n","from skimage import io, transform\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from torch.utils.data import Dataset, DataLoader\n","import torchvision\n","from torchvision import transforms, utils, models, datasets\n","import torch.nn as nn\n","import torch.optim as optim\n","import nibabel as nib\n","import scipy.ndimage as ndi\n","from pathlib import Path\n","from PIL import Image\n","import io\n","import json\n","import random\n","\n","# Ignore warnings\n","import warnings\n","warnings.filterwarnings(\"ignore\")\n","print(\"PyTorch Version: \",torch.__version__)\n","print(\"Torchvision Version: \",torchvision.__version__)"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"HErqZ9GNCDq6","executionInfo":{"status":"ok","timestamp":1677512595580,"user_tz":180,"elapsed":17,"user":{"displayName":"Hugo Massaroli","userId":"15440061811672054235"}}},"outputs":[],"source":["imagesFolder = '/content/gdrive/MyDrive/Tesis/Imagenes/ADNI-MUESTRA-FULL-stripped-preprocessed'\n","trainDatasetCSV = '/content/gdrive/MyDrive/Tesis/Imagenes/ADNI-MUESTRA-930/MUESTRA_train.csv'\n","valDatasetCSV =   '/content/gdrive/MyDrive/Tesis/Imagenes/ADNI-MUESTRA-930/MUESTRA_val.csv'\n","experimentName = 'Muestra930_performance_aux'\n","experimentOutputFolder = '/content/gdrive/MyDrive/Tesis/Experimentos/muestra930_4'\n","experimentDescription = 'Testeo de  stripping y removiendo las superfícies menores a 90x90. Nuevo código, carga imágenes. Salida auxiliar habilitada.'\n","executions = 1"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"VYNyT00wpzwU","executionInfo":{"status":"ok","timestamp":1677512595580,"user_tz":180,"elapsed":16,"user":{"displayName":"Hugo Massaroli","userId":"15440061811672054235"}}},"outputs":[],"source":["# Models to choose from [resnet, alexnet, vgg, squeezenet, densenet, inception]\n","model_name = \"inception\"\n","\n","# Number of classes in the dataset\n","num_classes = 3\n","\n","# Batch size for training (change depending on how much memory you have)\n","batch_size = 10\n","\n","dl_num_workers = 4\n","\n","# Number of epochs to train for\n","num_epochs = 50\n","\n","# Flag for feature extracting. When False, we finetune the whole model,\n","#   when True we only update the reshaped layer params\n","feature_extract = False\n","\n","usePretrained = True\n","\n","# Habilita la salida auxiliar\n","auxEnabled = True\n","\n","learningRate = 0.0001\n","dropoutRate = 0.6\n","crossEntrophyWeigths = torch.tensor([1.0,1.0,1.0])\n","\n","# Data augmentation\n","dataAugmentation = {\n","    \"angleTransformChance\": 0.1,\n","    \"zoomTransformChance\": 0.1,\n","    \"shiftTransformChance\": 0.0\n","}\n","# dataAugmentation = {}\n","\n","validationCacheSize = 300\n","trainCacheSize = 0\n","\n","debug = False"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"a2ZFcEXjwezm","executionInfo":{"status":"ok","timestamp":1677512596337,"user_tz":180,"elapsed":772,"user":{"displayName":"Hugo Massaroli","userId":"15440061811672054235"}}},"outputs":[],"source":["f = open(os.path.join(experimentOutputFolder, experimentName + \"_params.txt\"), \"w\")\n","f.write(\"batch_size: \" + str(batch_size) + \"\\n\")\n","f.write(\"dl_num_workers: \" + str(dl_num_workers) + \"\\n\")\n","f.write(\"epochs: \" + str(num_epochs) + \"\\n\")\n","f.write(\"feature_extract: \" + str(feature_extract) + \"\\n\")\n","f.write(\"usePretrained: \" + str(usePretrained) + \"\\n\")\n","f.write(\"auxEnabled: \" + str(auxEnabled) + \"\\n\")\n","f.write(\"learningRate: \" + str(learningRate) + \"\\n\")\n","f.write(\"dropoutRate: \" + str(dropoutRate) + \"\\n\")\n","f.write(\"cross entrophy weights: \" + str(crossEntrophyWeigths) + \"\\n\")\n","f.write(\"dataAugmentation: \" + str(json.dumps(dataAugmentation)) + \"\\n\")\n","f.write(\"executions: \" + str(executions) + \"\\n\")\n","f.write(\"validationCacheSize: \" + str(validationCacheSize) + \"\\n\")\n","f.write(\"trainCacheSize: \" + str(trainCacheSize) + \"\\n\")\n","f.close()"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"zJYNgYD9AC4X","executionInfo":{"status":"ok","timestamp":1677512596337,"user_tz":180,"elapsed":6,"user":{"displayName":"Hugo Massaroli","userId":"15440061811672054235"}}},"outputs":[],"source":["f = open(os.path.join(experimentOutputFolder, experimentName + \"_descripcion.txt\"), \"w\")\n","f.write(experimentDescription)\n","f.close()"]},{"cell_type":"code","source":["def logDebug(str):\n","    if debug:\n","        print(str)"],"metadata":{"id":"kbR_0LKedYLw","executionInfo":{"status":"ok","timestamp":1677512596338,"user_tz":180,"elapsed":6,"user":{"displayName":"Hugo Massaroli","userId":"15440061811672054235"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","execution_count":9,"metadata":{"id":"VDba_NBLQOou","executionInfo":{"status":"ok","timestamp":1677512596338,"user_tz":180,"elapsed":6,"user":{"displayName":"Hugo Massaroli","userId":"15440061811672054235"}}},"outputs":[],"source":["# https://stackoverflow.com/questions/8598673/how-to-save-a-pylab-figure-into-in-memory-file-which-can-be-read-into-pil-image\n","def fig2img(fig):\n","    \"\"\"Convert a Matplotlib figure to a PIL Image and return it\"\"\"\n","    buf = io.BytesIO()\n","    fig.savefig(buf, facecolor='black', dpi = 64, transparent=False) # dpi Requerido para que la imagen sea 512x512\n","    buf.seek(0)\n","    img = Image.open(buf)\n","    return img"]},{"cell_type":"code","execution_count":10,"metadata":{"id":"K-Z1h8wrQaiB","executionInfo":{"status":"ok","timestamp":1677512596338,"user_tz":180,"elapsed":5,"user":{"displayName":"Hugo Massaroli","userId":"15440061811672054235"}}},"outputs":[],"source":["def clipped_zoom(img, zoom_factor, **kwargs):\n","\n","    h, w = img.shape[:2]\n","\n","    # For multichannel images we don't want to apply the zoom factor to the RGB\n","    # dimension, so instead we create a tuple of zoom factors, one per array\n","    # dimension, with 1's for any trailing dimensions after the width and height.\n","    zoom_tuple = (zoom_factor,) * 2 + (1,) * (img.ndim - 2)\n","\n","    # Zooming out\n","    if zoom_factor < 1:\n","\n","        # Bounding box of the zoomed-out image within the output array\n","        zh = int(np.round(h * zoom_factor))\n","        zw = int(np.round(w * zoom_factor))\n","        top = (h - zh) // 2\n","        left = (w - zw) // 2\n","\n","        # Zero-padding\n","        out = np.zeros_like(img)\n","        out[top:top+zh, left:left+zw] = ndi.zoom(img, zoom_tuple, **kwargs)\n","\n","    # Zooming in\n","    elif zoom_factor > 1:\n","\n","        # Bounding box of the zoomed-in region within the input array\n","        zh = int(np.round(h / zoom_factor))\n","        zw = int(np.round(w / zoom_factor))\n","        top = (h - zh) // 2\n","        left = (w - zw) // 2\n","\n","        out = ndi.zoom(img[top:top+zh, left:left+zw], zoom_tuple, **kwargs)\n","\n","        # `out` might still be slightly larger than `img` due to rounding, so\n","        # trim off any extra pixels at the edges\n","        trim_top = ((out.shape[0] - h) // 2)\n","        trim_left = ((out.shape[1] - w) // 2)\n","        out = out[trim_top:trim_top+h, trim_left:trim_left+w]\n","\n","    # If zoom_factor == 1, just return the input array\n","    else:\n","        out = img\n","    return out"]},{"cell_type":"code","source":["class SelectGridImage(object):\n","    \"\"\"Selects a grid from the image\n","    \"\"\"\n","    def __init__(self, angleTransformChance = 0.0, zoomTransformChance = 0.0, shiftTransformChance = 0.0):\n","        self.angleTransformChance = angleTransformChance\n","        self.zoomTransformChance = zoomTransformChance\n","        self.shiftTransformChance = shiftTransformChance\n","\n","    def __call__(self, studyID):\n","        # angleTransformChance = 0.1, zoomTransformChance = 0.1, shiftTransformChance = 0.1,\n","        filename = \"normal.png\"\n","        if self.angleTransformChance > random.uniform(0.0, 1.0):\n","            filename = random.choice([\"angle15Left.png\", \"angle15Right.png\"])\n","        if random.uniform(0.0, 1.0) < self.zoomTransformChance:\n","            filename = random.choice([\"zoomIn.png\", \"zoomOut.png\"])\n","        if random.uniform(0.0, 1.0) < self.shiftTransformChance:\n","            filename = random.choice([\"shiftXLeft.png\", \"shiftXRight.png\", \"shiftYTop.png\", \"shiftYBottom.png\"])\n","        \n","        return os.path.join(studyID, filename)"],"metadata":{"id":"eVgG7KAS5zyq","executionInfo":{"status":"ok","timestamp":1677512596758,"user_tz":180,"elapsed":424,"user":{"displayName":"Hugo Massaroli","userId":"15440061811672054235"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["class LoadGridImage(object):\n","    \"\"\"Loads an image\n","    \"\"\"\n","\n","    def __call__(self, filePath):\n","      fullPath = os.path.join(imagesFolder, filePath)\n","\n","      return Image.open(fullPath)"],"metadata":{"id":"nAA2bysa6kdx","executionInfo":{"status":"ok","timestamp":1677512596759,"user_tz":180,"elapsed":13,"user":{"displayName":"Hugo Massaroli","userId":"15440061811672054235"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","execution_count":13,"metadata":{"id":"TX-5K8GGG-zT","executionInfo":{"status":"ok","timestamp":1677512596759,"user_tz":180,"elapsed":12,"user":{"displayName":"Hugo Massaroli","userId":"15440061811672054235"}}},"outputs":[],"source":["class RemoveTransparency(object):\n","    def __call__(self, sample):\n","      # La imagen se guarda con transparencia, removemos la dimension de indice 3\n","      return sample[0:3, :, :]"]},{"cell_type":"code","execution_count":14,"metadata":{"id":"UmM3wjZ0Qfa4","executionInfo":{"status":"ok","timestamp":1677512596759,"user_tz":180,"elapsed":11,"user":{"displayName":"Hugo Massaroli","userId":"15440061811672054235"}}},"outputs":[],"source":["class ToLabelOutput(object):\n","    def __call__(self, label):\n","        if label == \"CN\":\n","            return 0\n","        elif label == \"AD\":\n","            return 1\n","        else:\n","            return 2 # MCI, LMCI, EMCI"]},{"cell_type":"code","source":["class ADNIDataset(Dataset):\n","    \"\"\"ADNI dataset.\"\"\"\n","\n","    def __init__(self, name, csv_file, root_dir, transform=None, target_transform = None, \n","                 cacheSize = 200):\n","        \"\"\"\n","        Args:\n","            csv_file (string): Path to the csv file with annotations.\n","            root_dir (string): Directory with all the images.\n","            transform (callable, optional): Optional transform to be applied\n","                on a sample.\n","        \"\"\"\n","        self.name = name\n","        self.csv = pd.read_csv(csv_file)\n","        self.root_dir = root_dir\n","        self.transform = transform\n","        self.target_transform = target_transform\n","        # item_cache directamente almacena los items procesados\n","        self.cacheSize = cacheSize\n","        self.item_cache = [None] * cacheSize\n","        self.cachedItems = 0\n","\n","    def __len__(self):\n","      return int(len(self.csv))\n","\n","    def storeInCache(self, idx, image, label):\n","        if self.cacheSize > 0 and self.item_cache[idx % self.cacheSize] == None:  \n","            logDebug(self.name + \"] Storing item in cache: \" + str(idx))\n","            self.cachedItems += 1\n","            # Storing item in cache\n","            self.item_cache[idx % self.cacheSize] = {\n","                \"id\": idx,\n","                \"label\": label,\n","                \"image\": image\n","            }\n","            logDebug(self.name + \"] Cached items: \" + str(self.cachedItems))\n","\n","    def itemInCache(self, idx):\n","        if self.cacheSize > 0 and self.item_cache[idx % self.cacheSize] != None and self.item_cache[idx % self.cacheSize][\"id\"] == idx:\n","            return self.item_cache[idx % self.cacheSize]\n","        else:\n","            return None\n","\n","    def __getitem__(self, idx):\n","        if torch.is_tensor(idx):\n","            idx = idx.tolist()\n","\n","        if self.itemInCache(idx):\n","            item = self.itemInCache(idx)\n","            return item[\"image\"], item[\"label\"], \n","\n","        studyID = self.csv.iloc[idx, 0]\n","        subjectID = self.csv.iloc[idx, 1]\n","        processFormat = self.csv.iloc[idx, 7]\n","        date = self.csv.iloc[idx, 9]\n","        label = self.csv.iloc[idx, 2]\n","        \n","        if self.transform:\n","            image = self.transform(studyID)\n","            \n","        if self.target_transform:\n","            label = self.target_transform(label)\n","\n","        self.storeInCache(idx, image, label)\n","\n","        return image, label"],"metadata":{"id":"JmEN7Kfc31ge","executionInfo":{"status":"ok","timestamp":1677512596760,"user_tz":180,"elapsed":12,"user":{"displayName":"Hugo Massaroli","userId":"15440061811672054235"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","execution_count":16,"metadata":{"id":"tMPKNDmqyALS","executionInfo":{"status":"ok","timestamp":1677512596761,"user_tz":180,"elapsed":13,"user":{"displayName":"Hugo Massaroli","userId":"15440061811672054235"}}},"outputs":[],"source":["def printFile(text, file):\n","  print(text)\n","  if file != None:\n","      file.write(text + \"\\n\")"]},{"cell_type":"markdown","metadata":{"id":"zW1D_vQnpzDk"},"source":["# Modelo"]},{"cell_type":"code","execution_count":17,"metadata":{"id":"m44_ZbqJvsQ9","executionInfo":{"status":"ok","timestamp":1677512596761,"user_tz":180,"elapsed":12,"user":{"displayName":"Hugo Massaroli","userId":"15440061811672054235"}}},"outputs":[],"source":["def train_model(model, dataloaders, criterion, optimizer, num_epochs=25, is_inception=True, logFile = None):\n","    f = None\n","    if logFile != None:\n","        f = open(logFile, \"w\")\n","\n","    since = time.time()\n","\n","    train_acc_history = []\n","    val_acc_history = []\n","    train_loss_history = []\n","    val_loss_history = []\n","\n","    best_model_wts = copy.deepcopy(model.state_dict())\n","    best_acc = 0.0\n","\n","    for epoch in range(num_epochs):\n","        printFile('Epoch {}/{}'.format(epoch, num_epochs - 1), f)\n","        printFile('-' * 10, f)\n","\n","        # Each epoch has a training and validation phase\n","        for phase in ['train', 'val']:\n","            if phase == 'train':\n","                model.train()  # Set model to training mode\n","            else:\n","                model.eval()   # Set model to evaluate mode\n","\n","            running_loss = 0.0\n","            running_corrects = 0\n","            it = 0\n","\n","            # Iterate over data.\n","            for inputs, labels in dataloaders[phase]:\n","                inputs = inputs.to(device)\n","                labels = labels.to(device)\n","\n","                # zero the parameter gradients\n","                optimizer.zero_grad()\n","\n","                # forward\n","                # track history if only in train\n","                with torch.set_grad_enabled(phase == 'train'):\n","                    # Get model outputs and calculate loss\n","                    # Special case for inception because in training it has an auxiliary output. In train\n","                    #   mode we calculate the loss by summing the final output and the auxiliary output\n","                    #   but in testing we only consider the final output.\n","                    if is_inception and phase == 'train':\n","                        # From https://discuss.pytorch.org/t/how-to-optimize-inception-model-with-auxiliary-classifiers/7958\n","                        outputs, aux_outputs = model(inputs)\n","                        if auxEnabled: \n","                          loss1 = criterion(outputs, labels)\n","                          loss2 = criterion(aux_outputs, labels)\n","                          loss = loss1 + 0.4*loss2                          \n","                        else:\n","                          loss = criterion(outputs, labels)\n","                    else:\n","                        outputs = model(inputs)\n","                        loss = criterion(outputs, labels)\n","\n","                    _, preds = torch.max(outputs, 1)\n","\n","                    # backward + optimize only if in training phase\n","                    if phase == 'train':\n","                        loss.backward()\n","                        optimizer.step()\n","\n","                # statistics\n","                running_loss += loss.item() * inputs.size(0)\n","                running_corrects += torch.sum(preds == labels.data)\n","                logDebug(\"Iteration \" + str(it))\n","                it += 1\n","\n","            epoch_loss = running_loss / len(dataloaders[phase].dataset)\n","            epoch_acc = running_corrects.double() / len(dataloaders[phase].dataset)\n","\n","            printFile('{} Loss: {:.4f} Acc: {:.4f}'.format(phase, epoch_loss, epoch_acc), f)\n","\n","            # deep copy the model\n","            if phase == 'val' and epoch_acc > best_acc:\n","                best_acc = epoch_acc\n","                best_model_wts = copy.deepcopy(model.state_dict())\n","            if phase == 'val':\n","                val_acc_history.append(epoch_acc)\n","                val_loss_history.append(epoch_loss)\n","            if phase == 'train':\n","                train_acc_history.append(epoch_acc)\n","                train_loss_history.append(epoch_loss)\n","            \n","\n","    time_elapsed = time.time() - since\n","    printFile('Training complete in {:.0f}m {:.0f}s'.format(time_elapsed // 60, time_elapsed % 60), f)\n","    printFile('Best val Acc: {:4f}'.format(best_acc), f)\n","\n","    # load best model weights\n","    model.load_state_dict(best_model_wts)\n","    if logFile != None:\n","        f.close()\n","    return model, val_acc_history, val_loss_history, train_acc_history, train_loss_history"]},{"cell_type":"code","execution_count":18,"metadata":{"id":"Vl-UuMFJv0_S","executionInfo":{"status":"ok","timestamp":1677512596762,"user_tz":180,"elapsed":13,"user":{"displayName":"Hugo Massaroli","userId":"15440061811672054235"}}},"outputs":[],"source":["def set_parameter_requires_grad(model, feature_extracting):\n","    if feature_extracting:\n","        for param in model.parameters():\n","            param.requires_grad = False"]},{"cell_type":"markdown","metadata":{"id":"DuMUC0zqwFLw"},"source":["# Initialize and reshape inception"]},{"cell_type":"code","execution_count":40,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1320,"status":"ok","timestamp":1677513261655,"user":{"displayName":"Hugo Massaroli","userId":"15440061811672054235"},"user_tz":180},"id":"GqZfuwYwwLw2","outputId":"bfe76845-201c-4de0-a277-87cb953e2c2f"},"outputs":[{"output_type":"stream","name":"stdout","text":["num featurs2048\n","Inception3(\n","  (Conv2d_1a_3x3): BasicConv2d(\n","    (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), bias=False)\n","    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","  )\n","  (Conv2d_2a_3x3): BasicConv2d(\n","    (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)\n","    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","  )\n","  (Conv2d_2b_3x3): BasicConv2d(\n","    (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","    (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","  )\n","  (maxpool1): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)\n","  (Conv2d_3b_1x1): BasicConv2d(\n","    (conv): Conv2d(64, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","    (bn): BatchNorm2d(80, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","  )\n","  (Conv2d_4a_3x3): BasicConv2d(\n","    (conv): Conv2d(80, 192, kernel_size=(3, 3), stride=(1, 1), bias=False)\n","    (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","  )\n","  (maxpool2): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)\n","  (Mixed_5b): InceptionA(\n","    (branch1x1): BasicConv2d(\n","      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch5x5_1): BasicConv2d(\n","      (conv): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch5x5_2): BasicConv2d(\n","      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)\n","      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch3x3dbl_1): BasicConv2d(\n","      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch3x3dbl_2): BasicConv2d(\n","      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch3x3dbl_3): BasicConv2d(\n","      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch_pool): BasicConv2d(\n","      (conv): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","  )\n","  (Mixed_5c): InceptionA(\n","    (branch1x1): BasicConv2d(\n","      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch5x5_1): BasicConv2d(\n","      (conv): Conv2d(256, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch5x5_2): BasicConv2d(\n","      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)\n","      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch3x3dbl_1): BasicConv2d(\n","      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch3x3dbl_2): BasicConv2d(\n","      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch3x3dbl_3): BasicConv2d(\n","      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch_pool): BasicConv2d(\n","      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","  )\n","  (Mixed_5d): InceptionA(\n","    (branch1x1): BasicConv2d(\n","      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch5x5_1): BasicConv2d(\n","      (conv): Conv2d(288, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch5x5_2): BasicConv2d(\n","      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)\n","      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch3x3dbl_1): BasicConv2d(\n","      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch3x3dbl_2): BasicConv2d(\n","      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch3x3dbl_3): BasicConv2d(\n","      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch_pool): BasicConv2d(\n","      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","  )\n","  (Mixed_6a): InceptionB(\n","    (branch3x3): BasicConv2d(\n","      (conv): Conv2d(288, 384, kernel_size=(3, 3), stride=(2, 2), bias=False)\n","      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch3x3dbl_1): BasicConv2d(\n","      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch3x3dbl_2): BasicConv2d(\n","      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch3x3dbl_3): BasicConv2d(\n","      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), bias=False)\n","      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","  )\n","  (Mixed_6b): InceptionC(\n","    (branch1x1): BasicConv2d(\n","      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch7x7_1): BasicConv2d(\n","      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch7x7_2): BasicConv2d(\n","      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)\n","      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch7x7_3): BasicConv2d(\n","      (conv): Conv2d(128, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)\n","      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch7x7dbl_1): BasicConv2d(\n","      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch7x7dbl_2): BasicConv2d(\n","      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)\n","      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch7x7dbl_3): BasicConv2d(\n","      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)\n","      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch7x7dbl_4): BasicConv2d(\n","      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)\n","      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch7x7dbl_5): BasicConv2d(\n","      (conv): Conv2d(128, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)\n","      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch_pool): BasicConv2d(\n","      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","  )\n","  (Mixed_6c): InceptionC(\n","    (branch1x1): BasicConv2d(\n","      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch7x7_1): BasicConv2d(\n","      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch7x7_2): BasicConv2d(\n","      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)\n","      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch7x7_3): BasicConv2d(\n","      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)\n","      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch7x7dbl_1): BasicConv2d(\n","      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch7x7dbl_2): BasicConv2d(\n","      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)\n","      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch7x7dbl_3): BasicConv2d(\n","      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)\n","      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch7x7dbl_4): BasicConv2d(\n","      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)\n","      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch7x7dbl_5): BasicConv2d(\n","      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)\n","      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch_pool): BasicConv2d(\n","      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","  )\n","  (Mixed_6d): InceptionC(\n","    (branch1x1): BasicConv2d(\n","      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch7x7_1): BasicConv2d(\n","      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch7x7_2): BasicConv2d(\n","      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)\n","      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch7x7_3): BasicConv2d(\n","      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)\n","      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch7x7dbl_1): BasicConv2d(\n","      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch7x7dbl_2): BasicConv2d(\n","      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)\n","      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch7x7dbl_3): BasicConv2d(\n","      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)\n","      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch7x7dbl_4): BasicConv2d(\n","      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)\n","      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch7x7dbl_5): BasicConv2d(\n","      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)\n","      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch_pool): BasicConv2d(\n","      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","  )\n","  (Mixed_6e): InceptionC(\n","    (branch1x1): BasicConv2d(\n","      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch7x7_1): BasicConv2d(\n","      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch7x7_2): BasicConv2d(\n","      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)\n","      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch7x7_3): BasicConv2d(\n","      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)\n","      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch7x7dbl_1): BasicConv2d(\n","      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch7x7dbl_2): BasicConv2d(\n","      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)\n","      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch7x7dbl_3): BasicConv2d(\n","      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)\n","      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch7x7dbl_4): BasicConv2d(\n","      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)\n","      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch7x7dbl_5): BasicConv2d(\n","      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)\n","      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch_pool): BasicConv2d(\n","      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","  )\n","  (AuxLogits): InceptionAux(\n","    (conv0): BasicConv2d(\n","      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (conv1): BasicConv2d(\n","      (conv): Conv2d(128, 768, kernel_size=(5, 5), stride=(1, 1), bias=False)\n","      (bn): BatchNorm2d(768, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (fc): Sequential(\n","      (0): Linear(in_features=768, out_features=3, bias=True)\n","    )\n","  )\n","  (Mixed_7a): InceptionD(\n","    (branch3x3_1): BasicConv2d(\n","      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch3x3_2): BasicConv2d(\n","      (conv): Conv2d(192, 320, kernel_size=(3, 3), stride=(2, 2), bias=False)\n","      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch7x7x3_1): BasicConv2d(\n","      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch7x7x3_2): BasicConv2d(\n","      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)\n","      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch7x7x3_3): BasicConv2d(\n","      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)\n","      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch7x7x3_4): BasicConv2d(\n","      (conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), bias=False)\n","      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","  )\n","  (Mixed_7b): InceptionE(\n","    (branch1x1): BasicConv2d(\n","      (conv): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch3x3_1): BasicConv2d(\n","      (conv): Conv2d(1280, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch3x3_2a): BasicConv2d(\n","      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)\n","      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch3x3_2b): BasicConv2d(\n","      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)\n","      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch3x3dbl_1): BasicConv2d(\n","      (conv): Conv2d(1280, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch3x3dbl_2): BasicConv2d(\n","      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch3x3dbl_3a): BasicConv2d(\n","      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)\n","      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch3x3dbl_3b): BasicConv2d(\n","      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)\n","      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch_pool): BasicConv2d(\n","      (conv): Conv2d(1280, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","  )\n","  (Mixed_7c): InceptionE(\n","    (branch1x1): BasicConv2d(\n","      (conv): Conv2d(2048, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch3x3_1): BasicConv2d(\n","      (conv): Conv2d(2048, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch3x3_2a): BasicConv2d(\n","      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)\n","      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch3x3_2b): BasicConv2d(\n","      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)\n","      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch3x3dbl_1): BasicConv2d(\n","      (conv): Conv2d(2048, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch3x3dbl_2): BasicConv2d(\n","      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch3x3dbl_3a): BasicConv2d(\n","      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)\n","      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch3x3dbl_3b): BasicConv2d(\n","      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)\n","      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (branch_pool): BasicConv2d(\n","      (conv): Conv2d(2048, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","  )\n","  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\n","  (dropout): Dropout(p=0.6, inplace=False)\n","  (fc): Sequential(\n","    (0): Linear(in_features=2048, out_features=1024, bias=True)\n","    (1): ReLU()\n","    (2): Linear(in_features=1024, out_features=3, bias=True)\n","  )\n",")\n"]}],"source":["def initialize_model(model_name, num_classes, feature_extract, use_pretrained=True):\n","    # Initialize these variables which will be set in this if statement. Each of these\n","    #   variables is model specific.\n","    model_ft = None\n","    input_size = 0\n","\n","    if model_name == \"inception\":\n","        \"\"\" Inception v3\n","        Be careful, expects (299,299) sized images and has auxiliary output\n","        \"\"\"\n","        model_ft = models.inception_v3(pretrained=use_pretrained, \n","                                       aux_logits = True)\n","        set_parameter_requires_grad(model_ft, feature_extract)\n","        # Handle the auxilary net\n","        # num_ftrs = model_ft.AuxLogits.fc.in_features\n","        # model_ft.AuxLogits.fc = nn.Linear(num_ftrs, num_classes)\n","        # Handle the primary net\n","        num_ftrs = model_ft.fc.in_features\n","        print(\"num featurs\" + str(num_ftrs))\n","        # Fuente: https://github.com/bdrad/petdementiapub/blob/master/petdementia_source.py\n","        model_ft.dropout = nn.Dropout(dropoutRate)\n","        model_ft.fc = nn.Sequential(\n","          nn.Linear(num_ftrs,1024),\n","          nn.ReLU(),\n","          nn.Linear(1024,num_classes),\n","        )\n","\n","        if auxEnabled :\n","          model_ft.AuxLogits.fc = nn.Sequential(\n","            nn.Linear(768,num_classes), # elegido arbitrariamentoe\n","          )\n","          \n","        input_size = 512 \n","\n","    else:\n","        print(\"Invalid model name, exiting...\")\n","        exit()\n","\n","    return model_ft, input_size\n","\n","# Initialize the model for this run\n","model_ft, input_size = initialize_model(model_name, num_classes, feature_extract, use_pretrained=usePretrained)\n","\n","# Print the model we just instantiated\n","print(model_ft)"]},{"cell_type":"code","execution_count":41,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":24,"status":"ok","timestamp":1677513261655,"user":{"displayName":"Hugo Massaroli","userId":"15440061811672054235"},"user_tz":180},"id":"pfACeWNcwYqY","outputId":"ccb0b5c1-81ad-4be0-d7d5-5b2bf8bc0458"},"outputs":[{"output_type":"stream","name":"stdout","text":["Initializing Datasets and Dataloaders...\n"]}],"source":["# Data augmentation and normalization for training\n","# Just normalization for validation\n","trainGridArgs = dataAugmentation.copy()\n","\n","valGridArgs = {}\n","\n","data_transforms = {\n","    'train': transforms.Compose([\n","        SelectGridImage(**trainGridArgs),\n","        LoadGridImage(),\n","        transforms.ToTensor(),\n","        RemoveTransparency(),\n","        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n","    ]),\n","    'val': transforms.Compose([\n","        SelectGridImage(),\n","        LoadGridImage(),\n","        transforms.ToTensor(),\n","        RemoveTransparency(),\n","        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n","    ]),\n","}\n","\n","print(\"Initializing Datasets and Dataloaders...\")\n","\n","# Create training and validation datasets\n","\n","image_datasets = {\n","    'train': ADNIDataset('trainDL', trainDatasetCSV, imagesFolder, transform = data_transforms['train'], target_transform =ToLabelOutput(), cacheSize = trainCacheSize),\n","    'val': ADNIDataset('valDL', valDatasetCSV, imagesFolder, transform = data_transforms['val'], target_transform =ToLabelOutput(), cacheSize = validationCacheSize )\n","}\n","\n","# Create training and validation dataloaders\n","dataloaders_dict = {x: torch.utils.data.DataLoader(image_datasets[x], batch_size=batch_size, shuffle=True, num_workers=dl_num_workers) for x in ['train', 'val']}\n","\n","# Detect if we have a GPU available\n","device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")"]},{"cell_type":"code","execution_count":42,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":15,"status":"ok","timestamp":1677513261656,"user":{"displayName":"Hugo Massaroli","userId":"15440061811672054235"},"user_tz":180},"id":"XciJ190PwerB","outputId":"a6cd7338-53d8-4367-d49d-a8c750334d57"},"outputs":[{"output_type":"stream","name":"stdout","text":["Params to learn:\n","\t Conv2d_1a_3x3.conv.weight\n","\t Conv2d_1a_3x3.bn.weight\n","\t Conv2d_1a_3x3.bn.bias\n","\t Conv2d_2a_3x3.conv.weight\n","\t Conv2d_2a_3x3.bn.weight\n","\t Conv2d_2a_3x3.bn.bias\n","\t Conv2d_2b_3x3.conv.weight\n","\t Conv2d_2b_3x3.bn.weight\n","\t Conv2d_2b_3x3.bn.bias\n","\t Conv2d_3b_1x1.conv.weight\n","\t Conv2d_3b_1x1.bn.weight\n","\t Conv2d_3b_1x1.bn.bias\n","\t Conv2d_4a_3x3.conv.weight\n","\t Conv2d_4a_3x3.bn.weight\n","\t Conv2d_4a_3x3.bn.bias\n","\t Mixed_5b.branch1x1.conv.weight\n","\t Mixed_5b.branch1x1.bn.weight\n","\t Mixed_5b.branch1x1.bn.bias\n","\t Mixed_5b.branch5x5_1.conv.weight\n","\t Mixed_5b.branch5x5_1.bn.weight\n","\t Mixed_5b.branch5x5_1.bn.bias\n","\t Mixed_5b.branch5x5_2.conv.weight\n","\t Mixed_5b.branch5x5_2.bn.weight\n","\t Mixed_5b.branch5x5_2.bn.bias\n","\t Mixed_5b.branch3x3dbl_1.conv.weight\n","\t Mixed_5b.branch3x3dbl_1.bn.weight\n","\t Mixed_5b.branch3x3dbl_1.bn.bias\n","\t Mixed_5b.branch3x3dbl_2.conv.weight\n","\t Mixed_5b.branch3x3dbl_2.bn.weight\n","\t Mixed_5b.branch3x3dbl_2.bn.bias\n","\t Mixed_5b.branch3x3dbl_3.conv.weight\n","\t Mixed_5b.branch3x3dbl_3.bn.weight\n","\t Mixed_5b.branch3x3dbl_3.bn.bias\n","\t Mixed_5b.branch_pool.conv.weight\n","\t Mixed_5b.branch_pool.bn.weight\n","\t Mixed_5b.branch_pool.bn.bias\n","\t Mixed_5c.branch1x1.conv.weight\n","\t Mixed_5c.branch1x1.bn.weight\n","\t Mixed_5c.branch1x1.bn.bias\n","\t Mixed_5c.branch5x5_1.conv.weight\n","\t Mixed_5c.branch5x5_1.bn.weight\n","\t Mixed_5c.branch5x5_1.bn.bias\n","\t Mixed_5c.branch5x5_2.conv.weight\n","\t Mixed_5c.branch5x5_2.bn.weight\n","\t Mixed_5c.branch5x5_2.bn.bias\n","\t Mixed_5c.branch3x3dbl_1.conv.weight\n","\t Mixed_5c.branch3x3dbl_1.bn.weight\n","\t Mixed_5c.branch3x3dbl_1.bn.bias\n","\t Mixed_5c.branch3x3dbl_2.conv.weight\n","\t Mixed_5c.branch3x3dbl_2.bn.weight\n","\t Mixed_5c.branch3x3dbl_2.bn.bias\n","\t Mixed_5c.branch3x3dbl_3.conv.weight\n","\t Mixed_5c.branch3x3dbl_3.bn.weight\n","\t Mixed_5c.branch3x3dbl_3.bn.bias\n","\t Mixed_5c.branch_pool.conv.weight\n","\t Mixed_5c.branch_pool.bn.weight\n","\t Mixed_5c.branch_pool.bn.bias\n","\t Mixed_5d.branch1x1.conv.weight\n","\t Mixed_5d.branch1x1.bn.weight\n","\t Mixed_5d.branch1x1.bn.bias\n","\t Mixed_5d.branch5x5_1.conv.weight\n","\t Mixed_5d.branch5x5_1.bn.weight\n","\t Mixed_5d.branch5x5_1.bn.bias\n","\t Mixed_5d.branch5x5_2.conv.weight\n","\t Mixed_5d.branch5x5_2.bn.weight\n","\t Mixed_5d.branch5x5_2.bn.bias\n","\t Mixed_5d.branch3x3dbl_1.conv.weight\n","\t Mixed_5d.branch3x3dbl_1.bn.weight\n","\t Mixed_5d.branch3x3dbl_1.bn.bias\n","\t Mixed_5d.branch3x3dbl_2.conv.weight\n","\t Mixed_5d.branch3x3dbl_2.bn.weight\n","\t Mixed_5d.branch3x3dbl_2.bn.bias\n","\t Mixed_5d.branch3x3dbl_3.conv.weight\n","\t Mixed_5d.branch3x3dbl_3.bn.weight\n","\t Mixed_5d.branch3x3dbl_3.bn.bias\n","\t Mixed_5d.branch_pool.conv.weight\n","\t Mixed_5d.branch_pool.bn.weight\n","\t Mixed_5d.branch_pool.bn.bias\n","\t Mixed_6a.branch3x3.conv.weight\n","\t Mixed_6a.branch3x3.bn.weight\n","\t Mixed_6a.branch3x3.bn.bias\n","\t Mixed_6a.branch3x3dbl_1.conv.weight\n","\t Mixed_6a.branch3x3dbl_1.bn.weight\n","\t Mixed_6a.branch3x3dbl_1.bn.bias\n","\t Mixed_6a.branch3x3dbl_2.conv.weight\n","\t Mixed_6a.branch3x3dbl_2.bn.weight\n","\t Mixed_6a.branch3x3dbl_2.bn.bias\n","\t Mixed_6a.branch3x3dbl_3.conv.weight\n","\t Mixed_6a.branch3x3dbl_3.bn.weight\n","\t Mixed_6a.branch3x3dbl_3.bn.bias\n","\t Mixed_6b.branch1x1.conv.weight\n","\t Mixed_6b.branch1x1.bn.weight\n","\t Mixed_6b.branch1x1.bn.bias\n","\t Mixed_6b.branch7x7_1.conv.weight\n","\t Mixed_6b.branch7x7_1.bn.weight\n","\t Mixed_6b.branch7x7_1.bn.bias\n","\t Mixed_6b.branch7x7_2.conv.weight\n","\t Mixed_6b.branch7x7_2.bn.weight\n","\t Mixed_6b.branch7x7_2.bn.bias\n","\t Mixed_6b.branch7x7_3.conv.weight\n","\t Mixed_6b.branch7x7_3.bn.weight\n","\t Mixed_6b.branch7x7_3.bn.bias\n","\t Mixed_6b.branch7x7dbl_1.conv.weight\n","\t Mixed_6b.branch7x7dbl_1.bn.weight\n","\t Mixed_6b.branch7x7dbl_1.bn.bias\n","\t Mixed_6b.branch7x7dbl_2.conv.weight\n","\t Mixed_6b.branch7x7dbl_2.bn.weight\n","\t Mixed_6b.branch7x7dbl_2.bn.bias\n","\t Mixed_6b.branch7x7dbl_3.conv.weight\n","\t Mixed_6b.branch7x7dbl_3.bn.weight\n","\t Mixed_6b.branch7x7dbl_3.bn.bias\n","\t Mixed_6b.branch7x7dbl_4.conv.weight\n","\t Mixed_6b.branch7x7dbl_4.bn.weight\n","\t Mixed_6b.branch7x7dbl_4.bn.bias\n","\t Mixed_6b.branch7x7dbl_5.conv.weight\n","\t Mixed_6b.branch7x7dbl_5.bn.weight\n","\t Mixed_6b.branch7x7dbl_5.bn.bias\n","\t Mixed_6b.branch_pool.conv.weight\n","\t Mixed_6b.branch_pool.bn.weight\n","\t Mixed_6b.branch_pool.bn.bias\n","\t Mixed_6c.branch1x1.conv.weight\n","\t Mixed_6c.branch1x1.bn.weight\n","\t Mixed_6c.branch1x1.bn.bias\n","\t Mixed_6c.branch7x7_1.conv.weight\n","\t Mixed_6c.branch7x7_1.bn.weight\n","\t Mixed_6c.branch7x7_1.bn.bias\n","\t Mixed_6c.branch7x7_2.conv.weight\n","\t Mixed_6c.branch7x7_2.bn.weight\n","\t Mixed_6c.branch7x7_2.bn.bias\n","\t Mixed_6c.branch7x7_3.conv.weight\n","\t Mixed_6c.branch7x7_3.bn.weight\n","\t Mixed_6c.branch7x7_3.bn.bias\n","\t Mixed_6c.branch7x7dbl_1.conv.weight\n","\t Mixed_6c.branch7x7dbl_1.bn.weight\n","\t Mixed_6c.branch7x7dbl_1.bn.bias\n","\t Mixed_6c.branch7x7dbl_2.conv.weight\n","\t Mixed_6c.branch7x7dbl_2.bn.weight\n","\t Mixed_6c.branch7x7dbl_2.bn.bias\n","\t Mixed_6c.branch7x7dbl_3.conv.weight\n","\t Mixed_6c.branch7x7dbl_3.bn.weight\n","\t Mixed_6c.branch7x7dbl_3.bn.bias\n","\t Mixed_6c.branch7x7dbl_4.conv.weight\n","\t Mixed_6c.branch7x7dbl_4.bn.weight\n","\t Mixed_6c.branch7x7dbl_4.bn.bias\n","\t Mixed_6c.branch7x7dbl_5.conv.weight\n","\t Mixed_6c.branch7x7dbl_5.bn.weight\n","\t Mixed_6c.branch7x7dbl_5.bn.bias\n","\t Mixed_6c.branch_pool.conv.weight\n","\t Mixed_6c.branch_pool.bn.weight\n","\t Mixed_6c.branch_pool.bn.bias\n","\t Mixed_6d.branch1x1.conv.weight\n","\t Mixed_6d.branch1x1.bn.weight\n","\t Mixed_6d.branch1x1.bn.bias\n","\t Mixed_6d.branch7x7_1.conv.weight\n","\t Mixed_6d.branch7x7_1.bn.weight\n","\t Mixed_6d.branch7x7_1.bn.bias\n","\t Mixed_6d.branch7x7_2.conv.weight\n","\t Mixed_6d.branch7x7_2.bn.weight\n","\t Mixed_6d.branch7x7_2.bn.bias\n","\t Mixed_6d.branch7x7_3.conv.weight\n","\t Mixed_6d.branch7x7_3.bn.weight\n","\t Mixed_6d.branch7x7_3.bn.bias\n","\t Mixed_6d.branch7x7dbl_1.conv.weight\n","\t Mixed_6d.branch7x7dbl_1.bn.weight\n","\t Mixed_6d.branch7x7dbl_1.bn.bias\n","\t Mixed_6d.branch7x7dbl_2.conv.weight\n","\t Mixed_6d.branch7x7dbl_2.bn.weight\n","\t Mixed_6d.branch7x7dbl_2.bn.bias\n","\t Mixed_6d.branch7x7dbl_3.conv.weight\n","\t Mixed_6d.branch7x7dbl_3.bn.weight\n","\t Mixed_6d.branch7x7dbl_3.bn.bias\n","\t Mixed_6d.branch7x7dbl_4.conv.weight\n","\t Mixed_6d.branch7x7dbl_4.bn.weight\n","\t Mixed_6d.branch7x7dbl_4.bn.bias\n","\t Mixed_6d.branch7x7dbl_5.conv.weight\n","\t Mixed_6d.branch7x7dbl_5.bn.weight\n","\t Mixed_6d.branch7x7dbl_5.bn.bias\n","\t Mixed_6d.branch_pool.conv.weight\n","\t Mixed_6d.branch_pool.bn.weight\n","\t Mixed_6d.branch_pool.bn.bias\n","\t Mixed_6e.branch1x1.conv.weight\n","\t Mixed_6e.branch1x1.bn.weight\n","\t Mixed_6e.branch1x1.bn.bias\n","\t Mixed_6e.branch7x7_1.conv.weight\n","\t Mixed_6e.branch7x7_1.bn.weight\n","\t Mixed_6e.branch7x7_1.bn.bias\n","\t Mixed_6e.branch7x7_2.conv.weight\n","\t Mixed_6e.branch7x7_2.bn.weight\n","\t Mixed_6e.branch7x7_2.bn.bias\n","\t Mixed_6e.branch7x7_3.conv.weight\n","\t Mixed_6e.branch7x7_3.bn.weight\n","\t Mixed_6e.branch7x7_3.bn.bias\n","\t Mixed_6e.branch7x7dbl_1.conv.weight\n","\t Mixed_6e.branch7x7dbl_1.bn.weight\n","\t Mixed_6e.branch7x7dbl_1.bn.bias\n","\t Mixed_6e.branch7x7dbl_2.conv.weight\n","\t Mixed_6e.branch7x7dbl_2.bn.weight\n","\t Mixed_6e.branch7x7dbl_2.bn.bias\n","\t Mixed_6e.branch7x7dbl_3.conv.weight\n","\t Mixed_6e.branch7x7dbl_3.bn.weight\n","\t Mixed_6e.branch7x7dbl_3.bn.bias\n","\t Mixed_6e.branch7x7dbl_4.conv.weight\n","\t Mixed_6e.branch7x7dbl_4.bn.weight\n","\t Mixed_6e.branch7x7dbl_4.bn.bias\n","\t Mixed_6e.branch7x7dbl_5.conv.weight\n","\t Mixed_6e.branch7x7dbl_5.bn.weight\n","\t Mixed_6e.branch7x7dbl_5.bn.bias\n","\t Mixed_6e.branch_pool.conv.weight\n","\t Mixed_6e.branch_pool.bn.weight\n","\t Mixed_6e.branch_pool.bn.bias\n","\t AuxLogits.conv0.conv.weight\n","\t AuxLogits.conv0.bn.weight\n","\t AuxLogits.conv0.bn.bias\n","\t AuxLogits.conv1.conv.weight\n","\t AuxLogits.conv1.bn.weight\n","\t AuxLogits.conv1.bn.bias\n","\t AuxLogits.fc.0.weight\n","\t AuxLogits.fc.0.bias\n","\t Mixed_7a.branch3x3_1.conv.weight\n","\t Mixed_7a.branch3x3_1.bn.weight\n","\t Mixed_7a.branch3x3_1.bn.bias\n","\t Mixed_7a.branch3x3_2.conv.weight\n","\t Mixed_7a.branch3x3_2.bn.weight\n","\t Mixed_7a.branch3x3_2.bn.bias\n","\t Mixed_7a.branch7x7x3_1.conv.weight\n","\t Mixed_7a.branch7x7x3_1.bn.weight\n","\t Mixed_7a.branch7x7x3_1.bn.bias\n","\t Mixed_7a.branch7x7x3_2.conv.weight\n","\t Mixed_7a.branch7x7x3_2.bn.weight\n","\t Mixed_7a.branch7x7x3_2.bn.bias\n","\t Mixed_7a.branch7x7x3_3.conv.weight\n","\t Mixed_7a.branch7x7x3_3.bn.weight\n","\t Mixed_7a.branch7x7x3_3.bn.bias\n","\t Mixed_7a.branch7x7x3_4.conv.weight\n","\t Mixed_7a.branch7x7x3_4.bn.weight\n","\t Mixed_7a.branch7x7x3_4.bn.bias\n","\t Mixed_7b.branch1x1.conv.weight\n","\t Mixed_7b.branch1x1.bn.weight\n","\t Mixed_7b.branch1x1.bn.bias\n","\t Mixed_7b.branch3x3_1.conv.weight\n","\t Mixed_7b.branch3x3_1.bn.weight\n","\t Mixed_7b.branch3x3_1.bn.bias\n","\t Mixed_7b.branch3x3_2a.conv.weight\n","\t Mixed_7b.branch3x3_2a.bn.weight\n","\t Mixed_7b.branch3x3_2a.bn.bias\n","\t Mixed_7b.branch3x3_2b.conv.weight\n","\t Mixed_7b.branch3x3_2b.bn.weight\n","\t Mixed_7b.branch3x3_2b.bn.bias\n","\t Mixed_7b.branch3x3dbl_1.conv.weight\n","\t Mixed_7b.branch3x3dbl_1.bn.weight\n","\t Mixed_7b.branch3x3dbl_1.bn.bias\n","\t Mixed_7b.branch3x3dbl_2.conv.weight\n","\t Mixed_7b.branch3x3dbl_2.bn.weight\n","\t Mixed_7b.branch3x3dbl_2.bn.bias\n","\t Mixed_7b.branch3x3dbl_3a.conv.weight\n","\t Mixed_7b.branch3x3dbl_3a.bn.weight\n","\t Mixed_7b.branch3x3dbl_3a.bn.bias\n","\t Mixed_7b.branch3x3dbl_3b.conv.weight\n","\t Mixed_7b.branch3x3dbl_3b.bn.weight\n","\t Mixed_7b.branch3x3dbl_3b.bn.bias\n","\t Mixed_7b.branch_pool.conv.weight\n","\t Mixed_7b.branch_pool.bn.weight\n","\t Mixed_7b.branch_pool.bn.bias\n","\t Mixed_7c.branch1x1.conv.weight\n","\t Mixed_7c.branch1x1.bn.weight\n","\t Mixed_7c.branch1x1.bn.bias\n","\t Mixed_7c.branch3x3_1.conv.weight\n","\t Mixed_7c.branch3x3_1.bn.weight\n","\t Mixed_7c.branch3x3_1.bn.bias\n","\t Mixed_7c.branch3x3_2a.conv.weight\n","\t Mixed_7c.branch3x3_2a.bn.weight\n","\t Mixed_7c.branch3x3_2a.bn.bias\n","\t Mixed_7c.branch3x3_2b.conv.weight\n","\t Mixed_7c.branch3x3_2b.bn.weight\n","\t Mixed_7c.branch3x3_2b.bn.bias\n","\t Mixed_7c.branch3x3dbl_1.conv.weight\n","\t Mixed_7c.branch3x3dbl_1.bn.weight\n","\t Mixed_7c.branch3x3dbl_1.bn.bias\n","\t Mixed_7c.branch3x3dbl_2.conv.weight\n","\t Mixed_7c.branch3x3dbl_2.bn.weight\n","\t Mixed_7c.branch3x3dbl_2.bn.bias\n","\t Mixed_7c.branch3x3dbl_3a.conv.weight\n","\t Mixed_7c.branch3x3dbl_3a.bn.weight\n","\t Mixed_7c.branch3x3dbl_3a.bn.bias\n","\t Mixed_7c.branch3x3dbl_3b.conv.weight\n","\t Mixed_7c.branch3x3dbl_3b.bn.weight\n","\t Mixed_7c.branch3x3dbl_3b.bn.bias\n","\t Mixed_7c.branch_pool.conv.weight\n","\t Mixed_7c.branch_pool.bn.weight\n","\t Mixed_7c.branch_pool.bn.bias\n","\t fc.0.weight\n","\t fc.0.bias\n","\t fc.2.weight\n","\t fc.2.bias\n"]}],"source":["# Send the model to GPU\n","model_ft = model_ft.to(device)\n","\n","# Gather the parameters to be optimized/updated in this run. If we are\n","#  finetuning we will be updating all parameters. However, if we are\n","#  doing feature extract method, we will only update the parameters\n","#  that we have just initialized, i.e. the parameters with requires_grad\n","#  is True.\n","params_to_update = model_ft.parameters()\n","print(\"Params to learn:\")\n","if feature_extract:\n","    params_to_update = []\n","    for name,param in model_ft.named_parameters():\n","        if param.requires_grad == True:\n","            params_to_update.append(param)\n","            print(\"\\t\",name)\n","else:\n","    for name,param in model_ft.named_parameters():\n","        if param.requires_grad == True:\n","            print(\"\\t\",name)\n","\n","# Observe that all parameters are being optimized\n","optimizer_ft = optim.Adam(params_to_update, lr=learningRate)\n"]},{"cell_type":"code","execution_count":43,"metadata":{"id":"CVJl5AvUqK13","executionInfo":{"status":"ok","timestamp":1677513261656,"user_tz":180,"elapsed":12,"user":{"displayName":"Hugo Massaroli","userId":"15440061811672054235"}}},"outputs":[],"source":["def test_model(model,dataloaders,device):\n","    classStats = [{\n","        'fn': 0,\n","        'tn': 0,\n","        'tp': 0,\n","        'fp': 0,\n","        'n': 0,\n","    } for i in range(num_classes)]\n","    correctlyPredicted = 0\n","    n = 0\n","    model.eval()\n","    with torch.no_grad():\n","        for inputs, labels in dataloaders['val']:\n","            inputs = inputs.to(device)\n","            labels = labels.to(device)\n","            outputs = model(inputs)\n","            _, preds = torch.max(outputs, 1)\n","            \n","            # Iteramos para chequear estadisticas\n","            for i, correctClass in enumerate(labels.data):\n","              n += 1\n","              predictedClass = int(preds[i].item())\n","              correctClass = int(correctClass.item())\n","              classStats[correctClass]['n'] += 1\n","              if correctClass == predictedClass:\n","                  correctlyPredicted += 1\n","                  classStats[correctClass]['tp'] += 1\n","                  for i in range(num_classes):\n","                      if i != correctClass:\n","                          classStats[correctClass]['tn'] += 1\n","              else:\n","                  classStats[correctClass]['fn'] += 1\n","                  classStats[predictedClass]['fp'] += 1\n","                  for i in range(num_classes):\n","                      if i != correctClass and i != predictedClass:\n","                          classStats[correctClass]['tn'] += 1\n","    accuracy = correctlyPredicted * 1.0 / n\n","    return classStats, accuracy"]},{"cell_type":"code","execution_count":44,"metadata":{"id":"aK3auwSS05Le","executionInfo":{"status":"ok","timestamp":1677513261656,"user_tz":180,"elapsed":12,"user":{"displayName":"Hugo Massaroli","userId":"15440061811672054235"}}},"outputs":[],"source":["def printClassStats(stats):\n","  recall = sensitivity = stats['tp'] / (stats['tp'] + stats['fn']) # prob positive test result\n","  specificity = stats['tn'] / (stats['tn'] + stats['fp'])          # prob negative test result\n","  if stats['tp'] + stats['fp'] > 0:\n","    precision = stats['tp'] / (stats['tp'] + stats['fp'])          # prob of recognized positive actually correct\n","  else:\n","    precision = 1\n","    printFile(\"Setting precision as 1 but no positive value has been reported, so this is placeholder\", f)\n","  if precision + recall == 0:\n","    printFile(\"Setting f1 as 0 because precision + recall is ZERO\", f)\n","    f1 = 0.0\n","  else:\n","    f1 = 2 * (precision * recall) / ( precision + recall )\n","  printFile(\"Sensitivity (%): \" + str(round(sensitivity * 100)), f)\n","  printFile(\"Specificity (%): \" + str(round(specificity * 100)), f)\n","  printFile(\"Precision  (%): \" + str(round(precision * 100)), f)\n","  printFile(\"F1 Score  (%): \" + str(round(f1 * 100)), f)\n","  printFile(\"Number of images: \" + str(stats['n']), f)\n","  return recall, specificity, precision, f1"]},{"cell_type":"code","source":["# loading cache\n","#dataloaders_dict['train'].num_workers = 0\n","#dataloaders_dict['val'].num_workers = 0\n","\n","#for idx, (x, y) in enumerate(dataloaders_dict['train']):\n","#    print(f\"Loading Cache {idx*batch_size}.\\r\", end='')\n","\n","#for idx, (x, y) in enumerate(dataloaders_dict['val']):\n","#    print(f\"Loading Cache {idx*batch_size}.\\r\", end='')\n","\n","#dataloaders_dict['train'].num_workers = dl_num_workers\n","#dataloaders_dict['val'].num_workers = dl_num_workers"],"metadata":{"id":"Bp5X2oNCki65","executionInfo":{"status":"ok","timestamp":1677513261657,"user_tz":180,"elapsed":13,"user":{"displayName":"Hugo Massaroli","userId":"15440061811672054235"}}},"execution_count":45,"outputs":[]},{"cell_type":"code","execution_count":46,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"D84am68jwlX6","outputId":"1e9d5ca1-7f27-4775-b96e-541c73e98887","executionInfo":{"status":"ok","timestamp":1677514081791,"user_tz":180,"elapsed":820145,"user":{"displayName":"Hugo Massaroli","userId":"15440061811672054235"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["--- Execution 0 begin ---\n","Epoch 0/49\n","----------\n","train Loss: 1.4355 Acc: 0.4254\n","val Loss: 1.0100 Acc: 0.5267\n","Epoch 1/49\n","----------\n","train Loss: 1.1089 Acc: 0.6317\n","val Loss: 0.9792 Acc: 0.5567\n","Epoch 2/49\n","----------\n","train Loss: 0.8576 Acc: 0.7381\n","val Loss: 1.1470 Acc: 0.4833\n","Epoch 3/49\n","----------\n","train Loss: 0.6419 Acc: 0.8190\n","val Loss: 1.4054 Acc: 0.4833\n","Epoch 4/49\n","----------\n","train Loss: 0.6059 Acc: 0.8190\n","val Loss: 1.1641 Acc: 0.5333\n","Epoch 5/49\n","----------\n","train Loss: 0.3616 Acc: 0.8889\n","val Loss: 1.6924 Acc: 0.4400\n","Epoch 6/49\n","----------\n","train Loss: 0.2828 Acc: 0.9270\n","val Loss: 2.0251 Acc: 0.5067\n","Epoch 7/49\n","----------\n","train Loss: 0.3499 Acc: 0.8921\n","val Loss: 1.7037 Acc: 0.5167\n","Epoch 8/49\n","----------\n","train Loss: 0.2526 Acc: 0.9333\n","val Loss: 1.6271 Acc: 0.5533\n","Epoch 9/49\n","----------\n","train Loss: 0.2670 Acc: 0.9222\n","val Loss: 2.5107 Acc: 0.4233\n","Epoch 10/49\n","----------\n","train Loss: 0.2943 Acc: 0.9175\n","val Loss: 2.0404 Acc: 0.4633\n","Epoch 11/49\n","----------\n","train Loss: 0.2598 Acc: 0.9270\n","val Loss: 1.6827 Acc: 0.5133\n","Epoch 12/49\n","----------\n","train Loss: 0.2084 Acc: 0.9429\n","val Loss: 1.9708 Acc: 0.5133\n","Epoch 13/49\n","----------\n","train Loss: 0.1619 Acc: 0.9603\n","val Loss: 2.6477 Acc: 0.4867\n","Epoch 14/49\n","----------\n","train Loss: 0.2200 Acc: 0.9429\n","val Loss: 2.9587 Acc: 0.4433\n","Epoch 15/49\n","----------\n","train Loss: 0.1583 Acc: 0.9635\n","val Loss: 2.4408 Acc: 0.4900\n","Epoch 16/49\n","----------\n","train Loss: 0.1848 Acc: 0.9508\n","val Loss: 2.5090 Acc: 0.4633\n","Epoch 17/49\n","----------\n","train Loss: 0.1413 Acc: 0.9556\n","val Loss: 2.1276 Acc: 0.4733\n","Epoch 18/49\n","----------\n","train Loss: 0.2209 Acc: 0.9540\n","val Loss: 1.8626 Acc: 0.5167\n","Epoch 19/49\n","----------\n","train Loss: 0.1288 Acc: 0.9810\n","val Loss: 1.7238 Acc: 0.6200\n","Epoch 20/49\n","----------\n","train Loss: 0.1960 Acc: 0.9540\n","val Loss: 1.9271 Acc: 0.4400\n","Epoch 21/49\n","----------\n","train Loss: 0.1832 Acc: 0.9571\n","val Loss: 2.0359 Acc: 0.5767\n","Epoch 22/49\n","----------\n","train Loss: 0.0788 Acc: 0.9857\n","val Loss: 2.2916 Acc: 0.4667\n","Epoch 23/49\n","----------\n","train Loss: 0.1150 Acc: 0.9746\n","val Loss: 2.8052 Acc: 0.5500\n","Epoch 24/49\n","----------\n","train Loss: 0.1218 Acc: 0.9730\n","val Loss: 2.2716 Acc: 0.4567\n","Epoch 25/49\n","----------\n","train Loss: 0.1511 Acc: 0.9571\n","val Loss: 1.8676 Acc: 0.4967\n","Epoch 26/49\n","----------\n","train Loss: 0.1763 Acc: 0.9571\n","val Loss: 2.3004 Acc: 0.4433\n","Epoch 27/49\n","----------\n","train Loss: 0.1143 Acc: 0.9683\n","val Loss: 1.9499 Acc: 0.5600\n","Epoch 28/49\n","----------\n","train Loss: 0.1390 Acc: 0.9587\n","val Loss: 2.4843 Acc: 0.4233\n","Epoch 29/49\n","----------\n","train Loss: 0.2008 Acc: 0.9444\n","val Loss: 1.7769 Acc: 0.5300\n","Epoch 30/49\n","----------\n","train Loss: 0.1132 Acc: 0.9683\n","val Loss: 2.4511 Acc: 0.4900\n","Epoch 31/49\n","----------\n","train Loss: 0.1045 Acc: 0.9714\n","val Loss: 2.2526 Acc: 0.5367\n","Epoch 32/49\n","----------\n","train Loss: 0.0773 Acc: 0.9746\n","val Loss: 2.7119 Acc: 0.4400\n","Epoch 33/49\n","----------\n","train Loss: 0.1461 Acc: 0.9603\n","val Loss: 2.0172 Acc: 0.5333\n","Epoch 34/49\n","----------\n","train Loss: 0.0875 Acc: 0.9810\n","val Loss: 2.1614 Acc: 0.5433\n","Epoch 35/49\n","----------\n","train Loss: 0.1078 Acc: 0.9762\n","val Loss: 2.0877 Acc: 0.4400\n","Epoch 36/49\n","----------\n","train Loss: 0.0762 Acc: 0.9825\n","val Loss: 2.4358 Acc: 0.5800\n","Epoch 37/49\n","----------\n","train Loss: 0.0548 Acc: 0.9841\n","val Loss: 2.0289 Acc: 0.4800\n","Epoch 38/49\n","----------\n","train Loss: 0.0824 Acc: 0.9762\n","val Loss: 2.0384 Acc: 0.5567\n","Epoch 39/49\n","----------\n","train Loss: 0.0786 Acc: 0.9762\n","val Loss: 2.3122 Acc: 0.5367\n","Epoch 40/49\n","----------\n","train Loss: 0.0956 Acc: 0.9841\n","val Loss: 4.0469 Acc: 0.4333\n","Epoch 41/49\n","----------\n","train Loss: 0.0838 Acc: 0.9841\n","val Loss: 1.9761 Acc: 0.5133\n","Epoch 42/49\n","----------\n","train Loss: 0.0724 Acc: 0.9810\n","val Loss: 2.4067 Acc: 0.5233\n","Epoch 43/49\n","----------\n","train Loss: 0.0646 Acc: 0.9825\n","val Loss: 2.5117 Acc: 0.6300\n","Epoch 44/49\n","----------\n","train Loss: 0.0564 Acc: 0.9841\n","val Loss: 2.3287 Acc: 0.5133\n","Epoch 45/49\n","----------\n","train Loss: 0.0503 Acc: 0.9857\n","val Loss: 2.4923 Acc: 0.5300\n","Epoch 46/49\n","----------\n","train Loss: 0.0524 Acc: 0.9857\n","val Loss: 2.8218 Acc: 0.5767\n","Epoch 47/49\n","----------\n","train Loss: 0.0748 Acc: 0.9794\n","val Loss: 2.6270 Acc: 0.6000\n","Epoch 48/49\n","----------\n","train Loss: 0.0984 Acc: 0.9778\n","val Loss: 2.2766 Acc: 0.4800\n","Epoch 49/49\n","----------\n","train Loss: 0.1407 Acc: 0.9651\n","val Loss: 2.9310 Acc: 0.5100\n","Training complete in 13m 36s\n","Best val Acc: 0.630000\n","accuracy: 0.63\n","CN stats: \n","Sensitivity (%): 87\n","Specificity (%): 79\n","Precision  (%): 64\n","F1 Score  (%): 74\n","Number of images: 100\n","\n","AD stats: \n","Sensitivity (%): 82\n","Specificity (%): 78\n","Precision  (%): 62\n","F1 Score  (%): 70\n","Number of images: 100\n","\n","MCI stats: \n","Sensitivity (%): 20\n","Specificity (%): 92\n","Precision  (%): 65\n","F1 Score  (%): 31\n","Number of images: 100\n","--- Execution End ---\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 0 Axes>"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 0 Axes>"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 0 Axes>"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 0 Axes>"]},"metadata":{}}],"source":["accuracyValues = []\n","adStatValues = []\n","cnStatValues = []\n","mciStatValues = []\n","for i in range(0, executions):\n","    experimentExecutionName = experimentName + '_' + str(i)\n","    print(\"--- Execution \" + str(i) + \" begin ---\")\n","    # Setup the loss fxn\n","    crossEntrophyWeigths = crossEntrophyWeigths.to(device)\n","    criterion = nn.CrossEntropyLoss(crossEntrophyWeigths)\n","\n","    logFile = os.path.join(experimentOutputFolder, experimentExecutionName + '_train.log')\n","\n","    # Train and evaluate\n","    model_ft, val_acc_hist, val_loss_hist, train_acc_hist, train_loss_hist = train_model(model_ft, dataloaders_dict, criterion, optimizer_ft, num_epochs=num_epochs, is_inception=(model_name==\"inception\"), logFile = logFile)\n","\n","    torch.save(model_ft.state_dict(), os.path.join(experimentOutputFolder, experimentExecutionName + '.pth'))\n","\n","    # validation accuracy\n","    fig = plt.figure()\n","    lst = [ x.cpu().item() for x in val_acc_hist ]\n","    plt.plot(lst)\n","    ax = plt.gca()\n","    plt.text(0.05, 0.9, 'FE = ' + str(feature_extract), transform=ax.transAxes)\n","    plt.text(0.05, 0.8, 'LR = ' + str(learningRate), transform=ax.transAxes)\n","    plt.text(0.05, 0.7, 'batch = ' + str(batch_size), transform=ax.transAxes)\n","    plt.suptitle(experimentExecutionName + ' (acc set de validacion)')\n","    plt.ylabel('Accuracy')\n","    plt.xlabel('Epochs')\n","    plt.savefig(os.path.join(experimentOutputFolder, experimentExecutionName + '_val_acc.png'))\n","    plt.clf()\n","\n","    # validation loss\n","    fig = plt.figure()\n","    plt.plot(val_loss_hist)\n","    ax = plt.gca()\n","    plt.text(0.05, 0.3, 'FE = ' + str(feature_extract), transform=ax.transAxes)\n","    plt.text(0.05, 0.2, 'LR = ' + str(learningRate), transform=ax.transAxes)\n","    plt.text(0.05, 0.1, 'batch = ' + str(batch_size), transform=ax.transAxes)\n","    plt.suptitle(experimentExecutionName + ' (loss set de validacion)')\n","    plt.ylabel('Loss')\n","    plt.xlabel('Epochs')\n","    plt.savefig(os.path.join(experimentOutputFolder, experimentExecutionName + '_val_loss.png'))\n","    plt.clf()\n","\n","    # train accuracy\n","    fig = plt.figure()\n","    lst = [ x.cpu().item() for x in train_acc_hist ]\n","    ax = plt.gca()\n","    plt.text(0.05, 0.9, 'FE = ' + str(feature_extract), transform=ax.transAxes)\n","    plt.text(0.05, 0.8, 'LR = ' + str(learningRate), transform=ax.transAxes)\n","    plt.text(0.05, 0.7, 'batch = ' + str(batch_size), transform=ax.transAxes)\n","    plt.plot(lst)\n","    plt.suptitle(experimentExecutionName + ' (accuracy set de train)')\n","    plt.ylabel('Accuracy')\n","    plt.xlabel('Epochs')\n","    plt.savefig(os.path.join(experimentOutputFolder, experimentExecutionName + '_train_acc.png'))\n","    plt.clf()\n","\n","    # train loss\n","    fig = plt.figure()\n","    ax = plt.gca()\n","    plt.text(0.05, 0.3, 'FE = ' + str(feature_extract), transform=ax.transAxes)\n","    plt.text(0.05, 0.2, 'LR = ' + str(learningRate), transform=ax.transAxes)\n","    plt.text(0.05, 0.1, 'batch = ' + str(batch_size), transform=ax.transAxes)\n","    plt.plot(train_loss_hist)\n","    plt.suptitle(experimentExecutionName + ' (Loss set de train)')\n","    plt.ylabel('Loss')\n","    plt.xlabel('Epochs')\n","    plt.savefig(os.path.join(experimentOutputFolder, experimentExecutionName + '_train_loss.png'))\n","    plt.clf()\n","\n","    stats, accuracy = test_model(model_ft, dataloaders_dict, device)\n","\n","    print(\"accuracy: \" + str(accuracy))\n","    accuracyValues.append(accuracy)\n","\n","    f = open(os.path.join(experimentOutputFolder, experimentExecutionName + \"_stats.txt\"), \"w\")\n","    printFile(\"CN stats: \", f)\n","    recall, specificity, precision, f1 = printClassStats(stats[0])\n","    cnStatValues.append({\n","        \"recall\": recall,\n","        \"specificity\": specificity,\n","        \"precision\": precision,\n","        \"f1\": f1\n","    })\n","    # AD\n","    printFile(\"\\nAD stats: \", f)\n","    recall, specificity, precision, f1 = printClassStats(stats[1])\n","    adStatValues.append({\n","        \"recall\": recall,\n","        \"specificity\": specificity,\n","        \"precision\": precision,\n","        \"f1\": f1\n","    })\n","    # MCI\n","    printFile(\"\\nMCI stats: \", f)\n","    recall, specificity, precision, f1 = printClassStats(stats[2])\n","    mciStatValues.append({\n","        \"recall\": recall,\n","        \"specificity\": specificity,\n","        \"precision\": precision,\n","        \"f1\": f1\n","    })\n","    f.close()\n","\n","    print(\"--- Execution End ---\")"]},{"cell_type":"code","execution_count":47,"metadata":{"id":"WuiTfuCMd8j4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677514081792,"user_tz":180,"elapsed":15,"user":{"displayName":"Hugo Massaroli","userId":"15440061811672054235"}},"outputId":"7e71a4bf-3f05-4a50-a311-fc0b60453f35"},"outputs":[{"output_type":"stream","name":"stdout","text":["Final stats: \n","Executions: 1\n","Accuracy mean: 0.6299999952316284\n","Accuracy std: nan\n","Best accuracy: 0.6299999952316284\n","Worst accuracy: 0.6299999952316284\n"]}],"source":["accuracyValues = torch.tensor(accuracyValues)\n","std, mean = torch.std_mean(accuracyValues)\n","f = open(os.path.join(\n","    os.path.join(experimentOutputFolder, experimentName + '_results.txt')), \"w\")\n","printFile(\"Final stats: \", f)\n","printFile(\"Executions: \" + str(executions), f)\n","printFile(\"Accuracy mean: \" + str(mean.item()), f)\n","printFile(\"Accuracy std: \" + str(std.item()), f)\n","printFile(\"Best accuracy: \" + str(accuracyValues.max().item()), f)\n","printFile(\"Worst accuracy: \" + str(accuracyValues.min().item()), f)\n","f.close()"]},{"cell_type":"markdown","metadata":{"id":"xA-ShjPRUYxP"},"source":["# ROC - AUC"]},{"cell_type":"code","execution_count":48,"metadata":{"id":"mmKtfcWNUOIR","colab":{"base_uri":"https://localhost:8080/","height":281},"executionInfo":{"status":"ok","timestamp":1677514081792,"user_tz":180,"elapsed":13,"user":{"displayName":"Hugo Massaroli","userId":"15440061811672054235"}},"outputId":"b2fb67d8-4477-4f25-a1f8-d7f05024b566"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["def sortByX(point):\n","  return point[0]\n","\n","# Se necesita ordenar los puntos para llamar a torch.trapezoid con los puntos ordenados por la coordenada X\n","def sortListsByX(x, y):\n","    points = zip(x, y)\n","    points = list(points)\n","    points.sort(key=sortByX)\n","    x, y = ([ a for a,b in points ], [ b for a,b in points ])\n","    return x, y\n","\n","fig = plt.figure()\n","ad_y = ad_tpr = [ x[\"recall\"] for x in adStatValues ]\n","ad_x = ad_fpr = [ 1.0 - x[\"specificity\"] for x in adStatValues ]\n","ad_x, ad_y = sortListsByX(ad_x, ad_y)\n","\n","cn_y = cn_tpr = [ x[\"recall\"] for x in cnStatValues ]\n","cn_x = cn_fpr = [ 1.0 - x[\"specificity\"] for x in cnStatValues ]\n","cn_x, cn_y = sortListsByX(cn_x, cn_y)\n","\n","mci_y = mci_tpr = [ x[\"recall\"] for x in mciStatValues ]\n","mci_x = mci_fpr = [ 1.0 - x[\"specificity\"] for x in mciStatValues ]\n","mci_x, mci_y = sortListsByX(mci_x, mci_y)\n","\n","decimals = 3\n","ad_auc = round(torch.trapezoid(torch.tensor(ad_y), torch.tensor(ad_x)).item(), decimals)\n","cn_auc = round(torch.trapezoid(torch.tensor(cn_y), torch.tensor(cn_x)).item(), decimals)\n","mci_auc = round(torch.trapezoid(torch.tensor(mci_y), torch.tensor(mci_x)).item(), decimals)\n","\n","plt.title(experimentName + \" ROC\")\n","\n","plt.plot(ad_fpr, ad_tpr)\n","plt.plot(cn_fpr, cn_tpr)\n","plt.plot(mci_fpr, mci_tpr)\n","\n","plt.legend([\"AD (\"+str(ad_auc)+\")\", \"CN (\"+str(cn_auc)+\")\", \"MCI (\"+str(mci_auc)+\")\"], loc =\"lower right\")\n","plt.savefig(os.path.join(experimentOutputFolder, experimentExecutionName + '_auc_roc.png'))\n","    \n","plt.show()"]},{"cell_type":"code","execution_count":49,"metadata":{"id":"yUUyX_2fpMSX","colab":{"base_uri":"https://localhost:8080/","height":281},"executionInfo":{"status":"ok","timestamp":1677514081792,"user_tz":180,"elapsed":12,"user":{"displayName":"Hugo Massaroli","userId":"15440061811672054235"}},"outputId":"e853dc73-72b8-4118-e83b-7f9ccd53122c"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["fig = plt.figure()\n","ad_y = ad_tpr = [ x[\"recall\"] for x in adStatValues ]\n","ad_x = ad_fpr = [ 1.0 - x[\"specificity\"] for x in adStatValues ]\n","ad_x, ad_y = sortListsByX(ad_x, ad_y)\n","\n","decimals = 3\n","ad_auc = round(torch.trapezoid(torch.tensor(ad_y), torch.tensor(ad_x)).item(), decimals)\n","\n","plt.title(experimentName + \" AD ROC\")\n","\n","plt.plot(ad_fpr, ad_tpr)\n","\n","plt.legend([\"AD (\"+str(ad_auc)+\")\"], loc =\"lower right\")\n","plt.savefig(os.path.join(experimentOutputFolder, experimentExecutionName + '_auc_roc_ad.png'))\n","\n","plt.show()"]},{"cell_type":"code","execution_count":50,"metadata":{"id":"8hxzslmopMju","colab":{"base_uri":"https://localhost:8080/","height":281},"executionInfo":{"status":"ok","timestamp":1677514081793,"user_tz":180,"elapsed":12,"user":{"displayName":"Hugo Massaroli","userId":"15440061811672054235"}},"outputId":"7e2676c8-e7ab-4315-dc15-921cd665ed59"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["fig = plt.figure()\n","\n","cn_y = cn_tpr = [ x[\"recall\"] for x in cnStatValues ]\n","cn_x = cn_fpr = [ 1.0 - x[\"specificity\"] for x in cnStatValues ]\n","cn_x, cn_y = sortListsByX(cn_x, cn_y)\n","\n","decimals = 3\n","cn_auc = round(torch.trapezoid(torch.tensor(cn_y), torch.tensor(cn_x)).item(), decimals)\n","\n","plt.title(experimentName + \" CN ROC\")\n","\n","plt.plot(cn_fpr, cn_tpr)\n","\n","plt.legend([\"CN (\"+str(cn_auc)+\")\"], loc =\"lower right\")\n","plt.savefig(os.path.join(experimentOutputFolder, experimentExecutionName + '_auc_roc_cn.png'))\n","\n","plt.show()"]},{"cell_type":"code","execution_count":51,"metadata":{"id":"E9Z0TN2RpMzv","colab":{"base_uri":"https://localhost:8080/","height":281},"executionInfo":{"status":"ok","timestamp":1677514081793,"user_tz":180,"elapsed":11,"user":{"displayName":"Hugo Massaroli","userId":"15440061811672054235"}},"outputId":"5df687d0-de73-4d05-8942-492661bd884c"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["fig = plt.figure()\n","\n","mci_y = mci_tpr = [ x[\"recall\"] for x in mciStatValues ]\n","mci_x = mci_fpr = [ 1.0 - x[\"specificity\"] for x in mciStatValues ]\n","mci_x, mci_y = sortListsByX(mci_x, mci_y)\n","\n","decimals = 3\n","mci_auc = round(torch.trapezoid(torch.tensor(mci_y), torch.tensor(mci_x)).item(), decimals)\n","\n","plt.title(experimentName + \" MCI ROC\")\n","\n","plt.plot(mci_fpr, mci_tpr)\n","\n","plt.legend([\"MCI (\"+str(mci_auc)+\")\"], loc =\"lower right\")\n","plt.savefig(os.path.join(experimentOutputFolder, experimentExecutionName + '_auc_roc_mci.png'))\n","\n","plt.show()"]}],"metadata":{"accelerator":"GPU","colab":{"provenance":[{"file_id":"1r1HNUpbYS9M5mxjABQVENXOomeZs7bz3","timestamp":1677512393443},{"file_id":"17yE6VgODz9fuwCS9xxQasjwRDcQFYgpA","timestamp":1677506841076},{"file_id":"1vR1OejytPvS6AE6R3Atvrb4Et7pBtlCv","timestamp":1677506777011},{"file_id":"1foEkZEhBn-dpgauOPty7a0dCB7sLuKQZ","timestamp":1677506570237},{"file_id":"1y4lw-wXrz-5L5wGqE1-yugbzsH9Ll8dX","timestamp":1677158649041}]},"gpuClass":"premium","kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}